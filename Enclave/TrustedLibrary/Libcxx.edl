/*
 * Copyright (C) 2011-2019 Intel Corporation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright
 *     notice, this list of conditions and the following disclaimer in
 *     the documentation and/or other materials provided with the
 *     distribution.
 *   * Neither the name of Intel Corporation nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


/* Libcxx.edl - EDL sample for trusted C++ library. */

enclave {
    
    /* 
     * A subset of the C++03 standard is supported.
     */
	include "sgx_tcrypto.h"
	trusted {
        /*
         * Throw/catch exception inside the enclave.
         */
        //public void ecall_exception(void);

        /*
         * Utilize <map> inside the enclave.
         */
        //public void ecall_map(void);
		// public void ecall_print(void);
		public void ecall_bloom_init(int entries, double error);
		public void ecall_bloom_add([in, count=len]char *buffer, size_t len, int add);
		public void ecall_bloom_check([in, count=len]char *buffer, size_t len, int add);
		public void ecall_encrypt([in, count=len]char *encMessageIn, size_t len, [out, count=lenOut]char *decMessageOut, size_t lenOut, int userId);
		public void ecall_decrypt([in, count=len]char *encMessageIn, size_t len, [out, count=lenOut]char *decMessageOut, size_t lenOut, int userId);
		public void ecall_encrypt_with_key([in, count=len]char *encMessageIn, size_t len, [out, count=lenOut]char *decMessageOut, size_t lenOut, [in, count=newKeySize]uint8_t *key, size_t newKeySize);
		public void ecall_decrypt_with_key([in, count=len]char *encMessageIn, size_t len, [out, count=lenOut]char *decMessageOut, size_t lenOut, [in, count=newKeySize]uint8_t *key, size_t newKeySize);
		public void ecall_reEncryption(size_t plaintMsgLen, [in, count=len] char *encMessageIn, size_t len, [out, count=rstOut]char *resultOut, size_t rstOut, int userId);
		public void ecall_makeComment([in, count=encCommentLen]char* encComment, size_t encCommentLen, size_t plainCommentLen, size_t pid_msg, int userId);
		public void ecall_md5([in, count=msgLen]char *msg, size_t msgLen, [user_check]char *msgOut, [user_check]size_t *msgOutLen);
		public void ecall_map_init();
		public void ecall_random_get(int num);
		public void ecall_sys_reg([user_check]int *id, [out, size=k_len]uint8_t *key, size_t k_len);
		public void ecall_message_posting([in, size=encMsgLen]char *encMessage, size_t encMsgLen, size_t decMsgLen, [out, size=rst_len]char *rstOut, size_t rst_len, int uid);
		public void ecall_feedback([in, size=enc_feedback_len]char *enc_feedback, size_t enc_feedback_len, size_t feedback_len, size_t msg_len, int uid);
    };
	untrusted {
		void ocall_test([in, count=len]const char *buffer, size_t len, [in, count=msgLen]const char* msg, size_t msgLen);
		void ocall_finalise([in, count=len] char *msg, size_t len);
	};
};
